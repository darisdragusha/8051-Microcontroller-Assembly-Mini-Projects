	ORG	0000H

	LJMP	MAIN
LENGTH	EQU	60H
INDEX	EQU	20H

MAIN:
	ACALL	LOAD_WORD
	MOV	R0, #30H
	MOV	A, @R0
	MOV	LENGTH, A
	INC	R0
	MOV	DPTR, #RRESHTI
	MOV	INDEX, #00H
LOOP:
	CLR	A
	MOVC	A, @A+DPTR
	INC	DPTR
	INC	INDEX
	MOV	P2, INDEX
	MOV	40H, A
	CJNE	A, #0DH, SKIP
	INC	DPTR
	MOVC	A, @A+DPTR
	CJNE	A, #0AH, ENDD
SKIP:
	MOV	A, @R0
	CJNE	A, #0, NOT_FOUND
	MOV	A, INDEX
	SUBB	A, LENGTH
	MOV	P1, A
	SJMP	TEND
N_EQU:
	MOV	R0, #30H
	INC	R0
	SJMP	LOOP

ENDD:
	MOV	P1, #0
	SJMP	TEND
NOT_FOUND:

	CJNE	A, 40H, N_EQU
	INC	R0
	SJMP	LOOP

FJALA:	DB	3, 'WORD', 00H
RRESHTI:	DB	' THIS IS THE WORD WE ARE LOOKING FOR', 0DH, 0AH
TEND:	END

;SEARCH IF WORD IN SENTANCE, IF SO RETURN ITS STARTING INDEX. 
	ORG	000H
	LJMP	INIT

INIT:
INDEX	EQU	20H
WLENGTH	EQU	29H
TEMP	EQU	28H
	MOV	R0, #30H


MAIN:
	ACALL	MOV_WORD_TO_RAM
	MOV	DPTR, #SENTENCE
	ACALL	COMPARE

MOV_WORD_TO_RAM:
	MOV	DPTR, #WORD
;WORD LENGTH
	CLR	A
	MOVC	A, @A+DPTR
	MOV	@R0, A
	MOV	WLENGTH, A
	INC	DPTR
	INC	R0
ALL_BYTES:
	CLR	A
	MOVC	A, @A+DPTR
	MOV	@R0, A
	INC	DPTR
	INC	R0
	DJNZ	WLENGTH, ALL_BYTES
	MOV	R0, #30H	;RESTART
	RET

COMPARE:
	MOV	A, @R0
	INC	R0
	MOV	WLENGTH, A	;WORD LENGTH

NEXT_CHAR:
	CLR	A
	MOVC	A, @A+DPTR
	INC	DPTR
	INC	INDEX
	MOV	TEMP, A
	CJNE	A, #0DH, SKIP
	MOVC	A, @A+DPTR
	CJNE	A, #0AH, SKIP
	SJMP	NOT_FOUND
SKIP:
	MOV	A, @R0
	CJNE	A, TEMP, NEXT_CHAR
	DEC	WLENGTH
CONTINUE_COMPARE:
	INC	R0
	INC	INDEX
	CLR	A
	MOVC	A, @A+DPTR
	INC	DPTR
	MOV	TEMP, A
	MOV	A, @R0
	CJNE	A, TEMP, COMPARE
	DJNZ	WLENGTH, CONTINUE_COMPARE
	SJMP	FOUND
FOUND:
	MOV	A, INDEX
	SUBB	A, 30H
	MOV	P3, A		; OUTPUT INDEX OF MATCH 
	SJMP	ENDI

NOT_FOUND:
	MOV	P3, #0
	SJMP	ENDI
WORD:	DB	4, 'WORD'
SENTENCE:	DB	'THIS IS THE WORD WE ARE LOOKING FOR', 0DH, 0AH
ENDI:	END

