;DIPSW CONNECTED TO P1 CHOOSE THE BASIC UNIT (BINARY, 1HEX, 1BCD, 2BCD). ADD THE TWO TWO BYTE NUMBERS. DISPLAY THE RESULT IN P3 7SEGMENT CC

	ORG	0000H
	LJMP	INIT


INIT:
NUM1	EQU	30H
NUM2	EQU	40H
RESULT	EQU	50H
MAIN:
	ACALL	GET_NUMBERS
	ACALL	GET_UNIT
	ACALL	DISPLAY_RESULT
	LJMP ENDI

GET_NUMBERS:
	MOV	R0, #NUM1
	MOV	DPTR, #FIRSTNUM
	CLR	A
	MOVC	A, @A+DPTR
	MOV	30H, A
	INC	DPTR
	CLR	A
	MOVC	A, @A+DPTR
	MOV	31H, A
;NUM 2
	MOV	R1, #NUM2
	MOV	DPTR, #SECONDNUM
	CLR	A
	MOVC	A, @A+DPTR
	MOV	40H, A
	INC	DPTR
	CLR	A
	MOVC	A, @A+DPTR
	MOV	41H, A
	RET 

GET_UNIT:
BINARY:
	JNB	P1.0, BCD1
	MOV	P2, #'B'	; DISPLAY THE BASIC UNIT
	ACALL	ADD_BINARY
	RET
BCD1:
	JNB	P1.1, HEX1
	MOV	P2, #'D'
	ACALL	ADD_BCD1
	RET
HEX1:
	JNB	P1.2, BCD2
	MOV	P2, #'H'
	ACALL	ADD_HEX1
	RET
BCD2:
	JNB	P1.3, NO_UNIT
	MOV	P2, #'D'
	ACALL	ADD_BCD2
	RET
NO_UNIT:
	MOV	P2, #3		;??
	RET

ADD_BINARY:
	MOV	A, @R0
	MOV	R7, A
	MOV	A, @R1
	ADD	A, R7
	MOV	RESULT, A
	INC	R0
	INC	R1
	MOV	A, @R0
	MOV	R7, A
	MOV	A, @R1
	ADDC	A, R7
	MOV	RESULT+1, A
	
	CLR	A
	MOV	ACC.0, C
	MOV	RESULT+2, A
	RET

ADD_BCD1:
	MOV	A, @R0
	INC	R0
	MOV	R7, A
	MOV	A, @R1
	INC	R1
	ADD	A, R7
	DA	A
	MOV	R6, A
	ANL	A, #0FH
	MOV	RESULT, A
	
	MOV	A, R6
	SWAP	A
	ANL	A, #0FH
	JZ	NO_CARRY_BCD1
	SETB	C
NO_CARRY_BCD1:
	MOV	A, @R0
	MOV	R7, A
	MOV	A, @R1
	ADDC	A, R7
	DA	A
	MOV	R6, A
	ANL	A, #0FH
	MOV	RESULT+1, A
	
	MOV	A, R6
	SWAP	A
	ANL	A, #0FH
	MOV	RESULT+2, A
	RET

ADD_HEX1:
	MOV	A, @R0
	INC	R0
	MOV	R7, A
	MOV	A, @R1
	INC	R1
	ADD	A, R7
	MOV	R6, A
	ANL	A, #0FH
	MOV	RESULT, A
	MOV	A, R6
	SWAP	A
	ANL	A, #0FH
	JZ	NO_CARRY_HEX1
	SETB	C
NO_CARRY_HEX1:
	MOV	A, @R0
	MOV	R7, A
	MOV	A, @R1
	ADDC	A, R7
	MOV	R6, A
	ANL	A, #0FH
	MOV	RESULT+1, A
	MOV	A, R6
	SWAP	A
	ANL	A, #0FH
	MOV	RESULT+2, A
	RET

ADD_BCD2:
	MOV	A, @R0
	MOV	R7, A
	MOV	A, @R1
	ADD	A, R7
	DA	A
	MOV	RESULT, A
	INC	R0
	INC	R1
	MOV	A, @R0
	MOV	R7, A
	MOV	A, @R1
	ADD	A, R7
	DA	A
	MOV	RESULT+1, A
	CLR	A
	MOV	ACC.0, C
	MOV	RESULT+2, A
	RET

DISPLAY_RESULT:
	MOV	P0, 50H
	MOV	P3, 51H
	RET
FIRSTNUM:	DB	09H, 00H
SECONDNUM:	DB	09H, 00H
ENDI: END




